/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabalho_pesquisa_operacional;

import Entrada_Saida.Dados_In;
import java.io.File;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import trabalho_pesquisa_operacional.Operacoes_Matriciais.*;

/**
 *
 * @author Vitor
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal ESTA CLASSE CUIDARÁ DA TELA E DE RECEBER OS
     * DADOS
     */
    /*Minhas Variáveis*/
    int num_variaveis;
    int num_restricoes;
    int indiceSel;//selecione seo tipo é de maior ou menor

    //==========================================================================
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Btn_remove_var = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        num_variaveis=3;
        num_restricoes=3;
        jTable1 = new javax.swing.JTable();
        Btn_Add_restriction = new javax.swing.JButton();
        Btn_Del_restriction = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabela_recursos = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Tabela_custo_oti = new javax.swing.JTable();
        Btn_Simplex = new javax.swing.JButton();
        Radio_min = new javax.swing.JRadioButton();
        Radio_min.setSelected(true);
        Radio_max = new javax.swing.JRadioButton();
        Combo_tipo_restricao = new javax.swing.JComboBox<>();
        Barra_Menu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Menu_item_abrir_arquivo = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simplex");
        setBackground(new java.awt.Color(230, 230, 230));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButton1.setText("Adicionar variável");
        jButton1.setName("Btn_add_Var"); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel1.setText("Matriz de Coeficientes");

        Btn_remove_var.setText("Remover variável");
        Btn_remove_var.setActionCommand("Btn_remove_var");
        Btn_remove_var.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Btn_remove_varMouseClicked(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "x1", "x2", "x3"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        Btn_Add_restriction.setText("Adicionar Restrição");
        Btn_Add_restriction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Btn_Add_restrictionMouseClicked(evt);
            }
        });

        Btn_Del_restriction.setText("Remover Restrição");
        Btn_Del_restriction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Btn_Del_restrictionMouseClicked(evt);
            }
        });

        jLabel2.setText("Variáveis");

        jLabel6.setText("Restrições");

        Tabela_recursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null}
            },
            new String [] {
                "Recursos"
            }
        ));
        jScrollPane1.setViewportView(Tabela_recursos);

        jLabel3.setText("Custos");

        Tabela_custo_oti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "x1", "x2", "x3"
            }
        ));
        Tabela_custo_oti.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Tabela_custo_otiMouseEntered(evt);
            }
        });
        jScrollPane3.setViewportView(Tabela_custo_oti);

        Btn_Simplex.setText("Calcular Simplex");
        Btn_Simplex.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Btn_SimplexMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Btn_SimplexMouseEntered(evt);
            }
        });

        Radio_min.setText("Minimização");

        Radio_max.setText("Maximização");

        Combo_tipo_restricao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<=", ">=" }));

        jMenu1.setText("Arquivos");

        Menu_item_abrir_arquivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Menu_item_abrir_arquivo.setText("Abrir Arquivo");
        Menu_item_abrir_arquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_item_abrir_arquivoActionPerformed(evt);
            }
        });
        jMenu1.add(Menu_item_abrir_arquivo);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Sair");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        Barra_Menu.add(jMenu1);

        setJMenuBar(Barra_Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Btn_remove_var, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Btn_Add_restriction, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                            .addComponent(Btn_Del_restriction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Combo_tipo_restricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel6))))
                .addGap(33, 33, 33)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Btn_Simplex))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Radio_min)
                            .addComponent(Radio_max))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Combo_tipo_restricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Radio_min)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Radio_max)))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(Btn_Add_restriction))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Btn_remove_var)
                                    .addComponent(Btn_Del_restriction))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Btn_Simplex)
                                .addGap(75, 75, 75))))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        //tratando a matriz de coeficiente
        String[] dados = new String[num_restricoes];
        ((DefaultTableModel) jTable1.getModel()).addColumn("x" + (jTable1.getColumnCount() + 1), dados);
        num_variaveis = jTable1.getColumnCount();
        num_restricoes = jTable1.getRowCount();
        if (jTable1.getColumnModel().getColumnCount() > 1) {
            Btn_remove_var.setEnabled(true);
        }

        //tratando a equação de otimização
        String[] data = new String[1];
        ((DefaultTableModel) Tabela_custo_oti.getModel()).addColumn("x" + (Tabela_custo_oti.getColumnCount() + 1), data);
        if (Tabela_custo_oti.getColumnModel().getColumnCount() > 1) {
            Btn_remove_var.setEnabled(true);
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void Btn_remove_varMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Btn_remove_varMouseClicked
        // TODO add your handling code here:
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            int nRow = jTable1.getRowCount();
            int nCols = jTable1.getColumnCount() - 1;
            Object[][] celulas = new Object[nRow][nCols];
            String[] names = new String[nCols];

            for (int j = 0; j < nCols; j++) {
                names[j] = jTable1.getColumnName(j);
            }
            for (int i = 0; i < nRow; i++) {
                for (int j = 0; j < nCols; j++) {
                    celulas[i][j] = jTable1.getValueAt(i, j);
                }
            }
            DefaultTableModel novo_modelo = new DefaultTableModel(celulas, names);
            jTable1.setModel(novo_modelo);
            num_variaveis = jTable1.getColumnCount();
            num_restricoes = jTable1.getRowCount();
            if (jTable1.getColumnModel().getColumnCount() < 1) {
                Btn_remove_var.setEnabled(false);
            }
        }

        if (Tabela_custo_oti.getColumnModel().getColumnCount() > 0) {
            int nRow = Tabela_custo_oti.getRowCount();
            int nCols = Tabela_custo_oti.getColumnCount() - 1;
            Object[][] celulas = new Object[nRow][nCols];
            String[] names = new String[nCols];

            for (int j = 0; j < nCols; j++) {
                names[j] = Tabela_custo_oti.getColumnName(j);
            }
            for (int i = 0; i < nRow; i++) {
                for (int j = 0; j < nCols; j++) {
                    celulas[i][j] = Tabela_custo_oti.getValueAt(i, j);
                }
            }
            DefaultTableModel novo_modelo = new DefaultTableModel(celulas, names);
            Tabela_custo_oti.setModel(novo_modelo);
            if (jTable1.getColumnModel().getColumnCount() < 1) {
                Btn_remove_var.setEnabled(false);
            }
        }
    }//GEN-LAST:event_Btn_remove_varMouseClicked

    private void Btn_Add_restrictionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Btn_Add_restrictionMouseClicked
        // TODO add your handling code here:
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

        Object[] objetos = new Object[jTable1.getColumnCount()];
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            objetos[i] = "";
        }
        modelo.setNumRows(0);
        modelo.addRow(objetos);
        jTable1.setModel(modelo);

        //atualizando as restrições e custos
        DefaultTableModel dtm = (DefaultTableModel) Tabela_recursos.getModel();

        Object[] objetos_custos = new Object[Tabela_recursos.getColumnCount()];
        for (int i = 0; i < Tabela_recursos.getColumnCount(); i++) {
            objetos_custos[i] = "";
        }

        dtm.addRow(objetos_custos);
        Tabela_recursos.setModel(dtm);

        num_variaveis = jTable1.getColumnCount();
        num_restricoes = jTable1.getRowCount();
    }//GEN-LAST:event_Btn_Add_restrictionMouseClicked

    private void Btn_Del_restrictionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Btn_Del_restrictionMouseClicked
        // TODO add your handling code here:
        int i;

        i = jTable1.getSelectedRow();
        if (i >= 0) {
            //limpando a matriz de coeficientes
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.removeRow(i);
            num_variaveis = jTable1.getColumnCount();
            num_restricoes = jTable1.getRowCount();
            //=================================
            DefaultTableModel dtm2 = (DefaultTableModel) Tabela_recursos.getModel();
            dtm2.removeRow(i);
            //limpando o vetor de custos
        } else {
            JOptionPane.showMessageDialog(rootPane, "Selecione uma linha "
                    + "da matriz!", " Erro ", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Btn_Del_restrictionMouseClicked

    private void Btn_SimplexMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Btn_SimplexMouseClicked
        // TODO add your handling code here:

        TAD_Operacoes_Matriciais tad = new TAD_Operacoes_Matriciais();

        //double[][] A = new double[num_restricoes][num_variaveis + num_restricoes];
        double[][] A = null;
        double[] b = new double[num_restricoes];
        double[] c = null;

        int[] IndicesBase = new int[num_restricoes];
        int[] IndicesNaoBase = null;

        int aux = num_variaveis;

        indiceSel = Combo_tipo_restricao.getSelectedIndex();

        switch (indiceSel) {
            case 0:
                String Aux = JOptionPane.showInputDialog(rootPane, "Por Padrão, todas as restrições serão do tipo Menor ou igual. "
                        + "Existe alguma restrição do tipo de Maior ou Igual?\n"
                        + "Se sim coloque o ìndice da restrição no seguinte formato:<Indice1,Indice2,...>",
                        "Verificação de Restriçoes", JOptionPane.INFORMATION_MESSAGE);
                int[] vetor_aux = null;
                if (Aux.contains("<") && (Aux.contains(">"))) {
                    Aux = Aux.substring(Aux.indexOf("<") + 1, Aux.indexOf(">"));
                    StringTokenizer meu_token = new StringTokenizer(Aux, ",");
                    int num_tokens = meu_token.countTokens();

                    //se nao for digitado alguma coluna, caso contrário pega a forma padrão 
                    if (num_tokens > 0) {
                        vetor_aux = new int[num_tokens];
                        int contador = 0;

                        //lendo as colunas válidas que possuem restrições do tipo maior ou igual
                        while (meu_token.hasMoreTokens()) {
                            String token = meu_token.nextToken();
                            if (Integer.parseInt(token) <= num_restricoes) {
                                vetor_aux[contador] = Integer.parseInt(token);
                                contador++;
                            }
                        }
                        A = new double[num_restricoes][num_variaveis + num_restricoes + vetor_aux.length];
                        c = new double[num_variaveis + num_restricoes + vetor_aux.length];
                        //setando o padrão de A
                        for (int i = 0; i < A.length; i++) {
                            for (int j = 0; j < A[0].length; j++) {
                                if (j < num_variaveis) {
                                    A[i][j] = Double.parseDouble((String) jTable1.getValueAt(i, j));
                                } else if (j == aux) {
                                    A[i][j] = 1;
                                } else {
                                    A[i][j] = 0;
                                }
                            }
                            aux++;
                        }
                        //======================================================

                        //============Corrigir a Matriz A=======================
                        int auxiliar = num_restricoes + num_variaveis;
                        for (int i = 0; i < A.length; i++) {
                            for (int j = 0; j < vetor_aux.length; j++) {
                                if (i + 1 == vetor_aux[j]) {
                                    for (int k = 0; k < (A[0].length); k++) {
                                        if ((A[i][k] == 1) && (k >= num_variaveis)) {
                                            A[i][k] = -1;
                                            A[i][auxiliar] = 1;
                                            auxiliar = auxiliar + 1;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        //======================================================

                        //================Computando C==========================
                        for (int i = 0; i < c.length; i++) {
                            if (i < num_variaveis) {
                                c[i] = Double.parseDouble((String) Tabela_custo_oti.getValueAt(0, i));
                            } else if (i < num_variaveis + num_restricoes) {
                                c[i] = 0;
                            } else {
                                c[i] = 999999999;
                            }
                        }
                        //======================================================

                        //================Pegar Indices Básicos e não-básicos===
                        int contador_base = 0;
                        for (int i = 0; i < A.length; i++) {
                            for (int j = 0; j < A[0].length; j++) {
                                if (A[i][j] == 1 && j >= num_variaveis) {
                                    IndicesBase[contador_base] = j + 1;
                                    contador_base++;
                                    break;
                                }
                            }
                        }
                        int contador_nao_base = 0;
                        IndicesNaoBase = new int[A[0].length - IndicesBase.length];

                        for (int i = 0; i < A[0].length; i++) {
                            if (!tad.contains(IndicesBase, i + 1)) {
                                IndicesNaoBase[contador_nao_base] = i + 1;
                                contador_nao_base++;
                            }
                        }
                        //======================================================
                    } else {
                        A = new double[num_restricoes][num_variaveis + num_restricoes];
                        c = new double[num_variaveis + num_restricoes];
                        IndicesNaoBase = new int[num_variaveis];
                        for (int i = 0; i < A.length; i++) {
                            for (int j = 0; j < A[0].length; j++) {
                                if (j < num_variaveis) {
                                    A[i][j] = Double.parseDouble((String) jTable1.getValueAt(i, j));
                                } else if (j == aux) {
                                    A[i][j] = 1;
                                } else {
                                    A[i][j] = 0;
                                }
                            }
                            aux++;
                        }

                        //setando indices básicos e não básicos
                        for (int i = 0; i < A[0].length; i++) {
                            if (i < num_variaveis) {
                                IndicesNaoBase[i] = i;
                            }
                        }

                        int auxiliar = 0;
                        for (int i = 0; i < A[0].length; i++) {
                            if (i >= num_variaveis) {
                                IndicesBase[auxiliar] = i;
                                auxiliar++;
                            }
                        }
                        //======================================================

                        //setando C
                        if (c != null) {
                            for (int i = 0; i < (num_variaveis + num_restricoes); i++) {
                                if (i < num_variaveis) {
                                    c[i] = Double.parseDouble((String) Tabela_custo_oti.getValueAt(0, i));
                                } else {
                                    c[i] = 0;
                                }
                            }
                        } else {
                            throw new RuntimeException("Erro não foi possível computar os custos");
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(rootPane, "Não foi passado a "
                            + "forma padrão de correção das restriçoes.\n"
                            + "O problema será computado da forma padrão", "Verificação das Restrições", JOptionPane.INFORMATION_MESSAGE);
                    A = new double[num_restricoes][num_variaveis + num_restricoes];
                    c = new double[num_variaveis + num_restricoes];
                    IndicesNaoBase = new int[num_variaveis];
                    for (int i = 0; i < A.length; i++) {
                        for (int j = 0; j < A[0].length; j++) {
                            if (j < num_variaveis) {
                                A[i][j] = Double.parseDouble((String) jTable1.getValueAt(i, j));
                            } else if (j == aux) {
                                A[i][j] = 1;
                            } else {
                                A[i][j] = 0;
                            }
                        }
                        aux++;
                    }

                    //setando indices básicos e não básicos
                    for (int i = 0; i < A[0].length; i++) {
                        if (i < num_variaveis) {
                            IndicesNaoBase[i] = i;
                        }
                    }

                    int auxiliar = 0;
                    for (int i = 0; i < A[0].length; i++) {
                        if (i >= num_variaveis) {
                            IndicesBase[auxiliar] = i;
                            auxiliar++;
                        }
                    }
                    //======================================================

                    //setando C
                    if (c != null) {
                        for (int i = 0; i < (num_variaveis + num_restricoes); i++) {
                            if (i < num_variaveis) {
                                c[i] = Double.parseDouble((String) Tabela_custo_oti.getValueAt(0, i));
                            } else {
                                c[i] = 0;
                            }
                        }
                    } else {
                        throw new RuntimeException("Erro não foi possível computar os custos");
                    }
                    //======================================================
                }
                //debug
                tad.printa_matriz(A);
                break;
            case 1:
                String Aux1 = JOptionPane.showInputDialog(rootPane, "Por Padrão, todas as restrições serão do tipo Maior ou Igual. "
                        + "Existe alguma restrição do tipo Menor ou Igual?\n"
                        + "Se sim coloque o ìndice da restrição no seguinte formato:<Indice1,Indice2,...>",
                        "Verificação de Restriçoes", JOptionPane.INFORMATION_MESSAGE);
                int[] vetor_aux1 = null;

                if (Aux1.contains("<") && (Aux1.contains(">"))) {
                    Aux1 = Aux1.substring(Aux1.indexOf("<") + 1, Aux1.indexOf(">"));
                    StringTokenizer meu_token1 = new StringTokenizer(Aux1, ",");
                    int meu_tokens = meu_token1.countTokens();

                    if (meu_tokens > 0) {
                        vetor_aux1 = new int[meu_tokens];
                        int contador1 = 0;

                        //lendo as colunas válidas que possuem restrições do 
                        //tipo menor ou igual
                        while (meu_token1.hasMoreTokens()) {
                            String token = meu_token1.nextToken();
                            if (Integer.parseInt(token) <= num_restricoes) {
                                vetor_aux1[contador1] = Integer.parseInt(token);
                                contador1++;
                            }
                        }

                        //setando os tamanhos de A e C==========================
                        A = new double[num_restricoes][num_variaveis + 2 * num_restricoes - vetor_aux1.length];
                        c = new double[num_variaveis + 2 * num_restricoes - vetor_aux1.length];
                        //======================================================

                        //preenchendo a Matriz A pra depois corrigir============
                        for (int i = 0; i < A.length; i++) {
                            for (int j = 0; j < A[0].length; j++) {
                                if (j < num_variaveis) {
                                    A[i][j] = Double.parseDouble((String) jTable1.getValueAt(i, j));
                                } else if (j == aux) {
                                    A[i][j] = -1;
                                } else {
                                    A[i][j] = 0;
                                }
                            }
                            aux++;
                        }
                        tad.printa_matriz(A);
                        System.out.println("");
                        //======================================================

                        //Computando C==========================================
                        for (int i = 0; i < c.length; i++) {
                            if (i < num_variaveis) {
                                c[i] = Double.parseDouble((String) Tabela_custo_oti.getValueAt(0, i));
                            } else if (i < num_variaveis + num_restricoes) {
                                c[i] = 0;
                            } else {
                                c[i] = 999999999;
                            }
                        }
                        //======================================================

                        //Correção da matriz A==================================
                        aux = num_variaveis;
                        for (int i = 0; i < A.length; i++) {
                            for (int j = num_variaveis; j < A[0].length; j++) {
                                if (tad.contains(vetor_aux1, i + 1)) {
                                    A[i][aux] = 1;
                                    break;
                                }
                            }
                            aux++;
                        }

                        aux = num_variaveis + num_restricoes;
                        for (int i = 0; i < A.length; i++) {
                            for (int j = num_variaveis; j < A[0].length; j++) {
                                if (A[i][j] == -1) {
                                    A[i][aux] = 1;
                                    aux++;
                                    break;
                                }
                            }
                        }

                        //======================================================
                        //================Pegar Indices Básicos e não-básicos===
                        int contador_base = 0;
                        for (int i = 0; i < A.length; i++) {
                            for (int j = 0; j < A[0].length; j++) {
                                if (A[i][j] == 1 && j >= num_variaveis) {
                                    IndicesBase[contador_base] = j;
                                    contador_base++;
                                    break;
                                }
                            }
                        }
                        int contador_nao_base = 0;
                        IndicesNaoBase = new int[A[0].length - IndicesBase.length];

                        for (int i = 0; i < A[0].length; i++) {
                            if (!tad.contains(IndicesBase, i)) {
                                IndicesNaoBase[contador_nao_base] = i;
                                contador_nao_base++;
                            }
                        }
                        //======================================================
                        tad.printa_matriz(A);
                        //======================================================

                    } else {
                        //preenchendo os vetores da forma padrão de acordo com o Big-M
                        int aux2 = num_variaveis + num_restricoes;
                        A = new double[num_restricoes][num_variaveis + (2 * num_restricoes)];
                        c = new double[num_variaveis + (2 * num_restricoes)];

                        //preenchendo A=========================================
                        for (int i = 0; i < A.length; i++) {
                            for (int j = 0; j < A[0].length; j++) {
                                if (j < num_variaveis) {
                                    A[i][j] = Double.parseDouble((String) jTable1.getValueAt(i, j));
                                } else if (j == aux) {
                                    A[i][j] = -1;
                                } else if (aux2 == j) {
                                    A[i][j] = 1;
                                } else {
                                    A[i][j] = 0;
                                }
                            }
                            aux++;
                            aux2++;
                        }
                        //======================================================

                        //preenchendo C=========================================
                        for (int i = 0; i < c.length; i++) {
                            if (i < num_variaveis) {
                                c[i] = Double.parseDouble((String) Tabela_custo_oti.getValueAt(0, i));
                            } else if (i < num_variaveis + num_restricoes) {
                                c[i] = 0;
                            } else {
                                c[i] = 999999999;
                            }
                        }
                        //======================================================

                        //Preenchendo os Indices básicos e não básicos==========
                        int contador_base = 0;
                        for (int i = 0; i < A.length; i++) {
                            for (int j = 0; j < A[0].length; j++) {
                                if (A[i][j] == 1 && j >= num_variaveis) {
                                    IndicesBase[contador_base] = j;
                                    contador_base++;
                                    break;
                                }
                            }
                        }
                        int contador_nao_base = 0;
                        IndicesNaoBase = new int[A[0].length - IndicesBase.length];

                        for (int i = 0; i < A[0].length; i++) {
                            if (!tad.contains(IndicesBase, i)) {
                                IndicesNaoBase[contador_nao_base] = i;
                                contador_nao_base++;
                            }
                        }
                        //======================================================
                    }
                } else {
                    //preenchendo os vetores da forma padrão de acordo com o Big-M
                    int aux2 = num_variaveis + num_restricoes;
                    A = new double[num_restricoes][num_variaveis + (2 * num_restricoes)];
                    c = new double[num_variaveis + (2 * num_restricoes)];

                    //preenchendo A=============================================
                    for (int i = 0; i < A.length; i++) {
                        for (int j = 0; j < A[0].length; j++) {
                            if (j < num_variaveis) {
                                A[i][j] = Double.parseDouble((String) jTable1.getValueAt(i, j));
                            } else if (j == aux) {
                                A[i][j] = -1;
                            } else if (aux2 == j) {
                                A[i][j] = 1;
                            } else {
                                A[i][j] = 0;
                            }
                        }
                        aux++;
                        aux2++;
                    }
                    //==========================================================

                    //preenchendo C=============================================
                    for (int i = 0; i < c.length; i++) {
                        if (i < num_variaveis) {
                            c[i] = Double.parseDouble((String) Tabela_custo_oti.getValueAt(0, i));
                        } else if (i < num_variaveis + num_restricoes) {
                            c[i] = 0;
                        } else {
                            c[i] = 999999999;
                        }

                    }
                    //==========================================================

                    //Preenchendo os Indices básicos e não básicos==============
                    int contador_base = 0;
                    for (int i = 0; i < A.length; i++) {
                        for (int j = 0; j < A[0].length; j++) {
                            if (A[i][j] == 1 && j >= num_variaveis) {
                                IndicesBase[contador_base] = j;
                                contador_base++;
                                break;
                            }
                        }
                    }
                    int contador_nao_base = 0;
                    IndicesNaoBase = new int[A[0].length - IndicesBase.length];

                    for (int i = 0; i < A[0].length; i++) {
                        if (!tad.contains(IndicesBase, i)) {
                            IndicesNaoBase[contador_nao_base] = i;
                            contador_nao_base++;
                        }
                    }
                }
                //==============================================================
                tad.printa_matriz(A);
                break;
            default:
                throw new RuntimeException("Algo deu errado!!");
        }

        for (int i = 0; i < num_restricoes; i++) {
            b[i] = Double.parseDouble((String) Tabela_recursos.getValueAt(i, 0));
        }

        if (Radio_min.isSelected() && !Radio_max.isSelected()) {
            System.out.println("Nao e necessário fazer correções");
        } else if (!Radio_min.isSelected() && Radio_max.isSelected()) {
            for (int i = 0; i < num_variaveis; i++) {
                c[i] = c[i] * (-1);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, " Impossível Maximizar e Minimizar um modelo ", " Erro ", JOptionPane.ERROR_MESSAGE);
        }

        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Escolha o Diretório");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);//disabilitando o modo "All-files"
        //instanciações do JFileChooser

        if (chooser.showOpenDialog(rootPane) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                    + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                    + chooser.getSelectedFile());

        } else {
            System.out.println("Sem Seleção");
        }

        try {
            Metodo_Simplex.Calcula_Simplex(A, b, c, IndicesBase, IndicesNaoBase, A.length, A[0].length, (chooser.getSelectedFile() + File.separator + "Resultado_Simplex.txt"));
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Btn_SimplexMouseClicked

    private void Btn_SimplexMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Btn_SimplexMouseEntered
        // TODO add your handling code here:
        Btn_Simplex.setToolTipText("Este botão irá recolher os dados da tela e usá-los para otimizar o modelo dado, utilizando o método Simplex");
    }//GEN-LAST:event_Btn_SimplexMouseEntered

    private void Tabela_custo_otiMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tabela_custo_otiMouseEntered
        // TODO add your handling code here:
        Tabela_custo_oti.setToolTipText("Se o modelo já estiver na forma padrão, favor escolher a opção de Minimização");
    }//GEN-LAST:event_Tabela_custo_otiMouseEntered

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void Menu_item_abrir_arquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_item_abrir_arquivoActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Escolha o Diretório");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);//disabilitando o modo "All-files"
        //instanciações do JFileChooser

        if (chooser.showOpenDialog(rootPane) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                    + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                    + chooser.getSelectedFile());

        } else {
            System.out.println("Sem Seleção");
        }

        String verifica_formato = chooser.getName(chooser.getSelectedFile());
        if (verifica_formato.contains(".xml")) {
            Dados_In aux = new Dados_In();
            aux.leitura_arquivo(chooser.getSelectedFile());
            
            //A partir daqui eu vou tratar a Tela===============================
            //tratando o tipo de modelo, maximização ou minimização=============
            switch (aux.getTipo()) {
                case "MIN":
                    Radio_max.setSelected(false);
                    Radio_min.setSelected(true);
                    break;
                case "MAX":
                    Radio_max.setSelected(true);
                    Radio_min.setSelected(false);
                    break;
                default:
                    Radio_max.setSelected(false);
                    Radio_min.setSelected(false);
                    System.out.println("Erro não foi decidido entre maximizar "
                            + "e minimizar");
                    break;
            }

            //tratando a tabela A===============================================
            Object[][] data_A = new Object[aux.getNum_restricao()][aux.getNum_var()];
            String[] titulos_tabela = new String[aux.getNum_var()];

            for (int i = 0; i < aux.getNum_var(); i++) {
                titulos_tabela[i] = "x" + (i + 1);
            }

            for (int i = 0; i < aux.getNum_restricao(); i++) {
                for (int j = 0; j < aux.getNum_var(); j++) {
                    data_A[i][j] = aux.getMatriz_coef()[i][j];
                }
            }

            //gambiarra
            if (aux.getNum_var() < num_variaveis) {
                for (int i = 0; i < (num_variaveis - aux.getNum_var()); i++) {
                    int nRow = Tabela_custo_oti.getRowCount();
                    int nCols = Tabela_custo_oti.getColumnCount() - 1;
                    Object[][] celulas = new Object[nRow][nCols];
                    String[] names = new String[nCols];

                    for (int j = 0; j < nCols; j++) {
                        names[j] = Tabela_custo_oti.getColumnName(j);
                    }
                    for (int k = 0; k < nRow; k++) {
                        for (int j = 0; j < nCols; j++) {
                            celulas[k][j] = Tabela_custo_oti.getValueAt(k, j);
                        }
                    }
                    DefaultTableModel novo_modelo = new DefaultTableModel(celulas, names);
                    Tabela_custo_oti.setModel(novo_modelo);
                }
            }

            num_variaveis = aux.getNum_var();
            num_restricoes = aux.getNum_restricao();

            DefaultTableModel minha_tabela_A = new DefaultTableModel(data_A, titulos_tabela);

            jTable1.setModel(minha_tabela_A);

            //tratando a tabela B/Recursos======================================
            Object[][] data_B = new Object[aux.getNum_restricao()][1];
            String[] titulo_B = new String[1];

            titulo_B[0] = "Recursos";

            for (int i = 0; i < aux.getNum_restricao(); i++) {
                data_B[i][0] = aux.getRecursos()[i];
            }

            DefaultTableModel minha_tabela_B = new DefaultTableModel(data_B, titulo_B);
            Tabela_recursos.setModel(minha_tabela_B);

            //tratando a tabela C/custos========================================
            Object[][] data_C = new Object[1][aux.getNum_var()];

            for (int i = 0; i < aux.getNum_var(); i++) {
                data_C[0][i] = aux.getCustos()[i];
            }

            DefaultTableModel minha_tabela_C = new DefaultTableModel(data_C, titulos_tabela);
            Tabela_custo_oti.setModel(minha_tabela_C);
            //==================================================================
        } else {
            JOptionPane.showInputDialog(rootPane, "Erro! Formato não aceito. Por favor selecione o arquivo xml", verifica_formato, JOptionPane.ERROR_MESSAGE);
            throw new RuntimeException("Erro de Formato");
        }
    }//GEN-LAST:event_Menu_item_abrir_arquivoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar Barra_Menu;
    private javax.swing.JButton Btn_Add_restriction;
    private javax.swing.JButton Btn_Del_restriction;
    private javax.swing.JButton Btn_Simplex;
    private javax.swing.JButton Btn_remove_var;
    private javax.swing.JComboBox<String> Combo_tipo_restricao;
    private javax.swing.JMenuItem Menu_item_abrir_arquivo;
    private javax.swing.JRadioButton Radio_max;
    private javax.swing.JRadioButton Radio_min;
    private javax.swing.JTable Tabela_custo_oti;
    private javax.swing.JTable Tabela_recursos;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
